v1.1 CvsBuild 22:
 - real-time server, disabled throttling by VSIB and instead use again 
   normal IPD wait as in file server (after a REQUEST_RESTART old blocks 
   are sent as TS_BLOCK_ORIGINAL, but a VSIB does not throttle these old
   ones, so it blasts at 1 Gbit/s and bombs...)
 - client, ttp_request_retransmit additional check at start so that 
   already received blocks are not queued up for later retransmit batch-request

v1.1 CvsBuild 21:
 - client, increased UDP port upping limit from 16 to 256 concurrent client 
   download sessions, added a warning that shows current nr of reserved
   client UDP ports
 - client, enabled RETX_REQBLOCK_SORTING in Makefile.am
 - server, changed block_new into block_type flag, and real-time server
   skips throttling for TS_BLOCK_ORIGINAL only (VSIB does throttling) so
   the final TS_BLOCK_TERMINATE block(s) are not blasted out at 1 Gbit/s

v1.1 CvsBuild 20:
 - added lossless, losswindow, blockdump settings to client transcript printouts
 - fixed rtserver/Makefile.am, rtclient/Makefile.am to define -DVSIB_REALTIME
 - server prints client IP before auth takes place
 - added client transcript file to Octave plot generator script, under ./util/

v1.1 CvsBuild 19:
 - client, cleaned up the GET * code a lot, file list can contain up 
   to 65530 files (although, as 'tsunamid' currently gets * files as 
   command line arguments, the maximum argument length is the current limit)

V1.1 CvsBuild 18:
 - client, replaced 'set noretransmit' option with 'lossless' (yes/no) and 
   'losswindow' (milliseconds) options to allow for near-time lossless transmissions 
   e.g. from limited VSIB memory buffer
 - reduced client ring buffer size from 8192 to 4096

V1.1 CvsBuild 17:
 - realtime server, removed extra delay before sending newly read VSIB block

V1.1 CvsBuild 16:
 - client, added 'set passphrase' option so the user is not prompted for the password, this
   is used for e.g. scripting (of course, plaintext password in scripts then)
	
V1.1 CvsBuild 15:
 - client, "get *", if the server sends full path names, place files in that same path
   on client side if the path exists, otherwise place in current working directory

